
import java.io.*;
import java.net.*;
import java.util.*;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 陳楷勛
 */
public class ClientWin extends javax.swing.JFrame {
    String smtp_server;
    int SMTP_PORT;
    String pop_server;
    int POP_PORT;
    SSLSocketFactory sslsocketfactorySmtp = null;
    SSLSocketFactory sslsocketfactoryPop = null;
    SSLSocket smtp = null;
    SSLSocket pop = null;
    ClientWin win;
    BufferedReader smtp_in;
    PrintWriter smtp_out;
    BufferedReader pop_in;
    PrintWriter pop_out;
    connectdb db;
    int count = 0;
    boolean[] recTable;
    
    public ClientWin() {
        initComponents();
        this.win = this;
        win.disconnectSmtp.setEnabled(false);
        win.disconnectPop.setEnabled(false);
        loginOperateSmtpSet(false,false);
        sendOperateSmtpSet(false,false);
        loginOperatePopSet(false,false);
        getOperateSmtpSet(false,false);
        win.smtpMsg.setEditable(false);    
        win.popMsg.setEditable(false);
        win.forwarding.setEnabled(false);
        win.reply.setEnabled(false);
        win.reMailId.setEnabled(false);
        db = new connectdb(this);
        db.createNewTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        smtpServerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        popServerName = new javax.swing.JTextField();
        connectSmtp = new javax.swing.JButton();
        smtpPort = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        popPort = new javax.swing.JTextField();
        disconnectSmtp = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        yourEmailAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        acc = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pass = new javax.swing.JPasswordField();
        login = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        smtpMsg = new javax.swing.JTextArea();
        connectPop = new javax.swing.JButton();
        disconnectPop = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        checkAuth = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        receiverAddr = new javax.swing.JTextField();
        sendMsg = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        emailMsg = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        subjectValue = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        accPop = new javax.swing.JTextField();
        passPop = new javax.swing.JPasswordField();
        loginPop = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        popMsg = new javax.swing.JTextArea();
        list = new javax.swing.JButton();
        opNum = new javax.swing.JTextField();
        delete = new javax.swing.JButton();
        retrieve = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        databaseMsg = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        showMenu = new javax.swing.JButton();
        mailid = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        view = new javax.swing.JButton();
        deletemail = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        reMailId = new javax.swing.JTextField();
        forwarding = new javax.swing.JButton();
        reply = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("SMTP Server Address :");

        smtpServerName.setText("smtp.gmail.com");
        smtpServerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smtpServerNameActionPerformed(evt);
            }
        });

        jLabel2.setText("POP Server Address : ");

        popServerName.setText("pop.gmail.com");

        connectSmtp.setText("Connect SMTP");
        connectSmtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectSmtpActionPerformed(evt);
            }
        });

        smtpPort.setText("465");

        jLabel3.setText("SMTP Port :");

        jLabel4.setText("POP Port : ");

        popPort.setText("995");

        disconnectSmtp.setText(" Disconnect SMTP");
        disconnectSmtp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectSmtpActionPerformed(evt);
            }
        });

        jLabel5.setText("Your Email Adderss : ");

        yourEmailAddress.setText("");
        yourEmailAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yourEmailAddressActionPerformed(evt);
            }
        });

        jLabel6.setText("Username :");

        acc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accActionPerformed(evt);
            }
        });

        jLabel8.setText("Password :");

        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        smtpMsg.setColumns(20);
        smtpMsg.setRows(5);
        smtpMsg.setToolTipText("");
        jScrollPane1.setViewportView(smtpMsg);

        connectPop.setText("Connect POP");
        connectPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectPopActionPerformed(evt);
            }
        });

        disconnectPop.setText("Quit");
        disconnectPop.setToolTipText("");
        disconnectPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectPopActionPerformed(evt);
            }
        });

        jLabel7.setText("Send a mail : ");

        checkAuth.setText("Yes");
        checkAuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAuthActionPerformed(evt);
            }
        });

        jLabel9.setText("Receivers' Email Address (Split with space) : ");

        receiverAddr.setText("");
        receiverAddr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiverAddrActionPerformed(evt);
            }
        });

        sendMsg.setText("Send Email");
        sendMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsgActionPerformed(evt);
            }
        });

        jLabel10.setText("Email Message : ");

        emailMsg.setColumns(20);
        emailMsg.setRows(5);
        jScrollPane2.setViewportView(emailMsg);

        jLabel11.setText("SMTP Server Message :");

        jLabel12.setText("Subject : ");

        jLabel13.setText("Username :");

        jLabel14.setText("Password :");

        accPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accPopActionPerformed(evt);
            }
        });

        loginPop.setText("Login");
        loginPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginPopActionPerformed(evt);
            }
        });

        jLabel15.setText("POP Server Message :");

        popMsg.setColumns(20);
        popMsg.setRows(5);
        popMsg.setToolTipText("");
        jScrollPane3.setViewportView(popMsg);

        list.setText("List");
        list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        retrieve.setText("Retrieve");
        retrieve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveActionPerformed(evt);
            }
        });

        jLabel16.setText("The Mail Number :");

        databaseMsg.setColumns(20);
        databaseMsg.setRows(5);
        jScrollPane4.setViewportView(databaseMsg);

        jLabel17.setText("Mail Browser :");

        showMenu.setText("Show Mail List");
        showMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMenuActionPerformed(evt);
            }
        });

        mailid.setToolTipText("");

        jLabel18.setText("Id :");

        view.setText("View Mail");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        deletemail.setText("Delete Mail");
        deletemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletemailActionPerformed(evt);
            }
        });

        jLabel19.setText("Mail Id :");

        forwarding.setText("Mail Forwarding");
        forwarding.setActionCommand("");
        forwarding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardingActionPerformed(evt);
            }
        });

        reply.setText("Reply Mail");
        reply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subjectValue))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendMsg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(receiverAddr))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(smtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(smtpServerName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(disconnectSmtp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(connectSmtp, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGap(8, 8, 8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(popServerName)
                            .addComponent(popPort, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectPop, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(checkAuth, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(33, 33, 33)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pass, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                        .addComponent(acc))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(yourEmailAddress)))
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reMailId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forwarding)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reply)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel16)
                                            .addComponent(opNum))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(retrieve, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(list, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(disconnectPop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(passPop, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                        .addComponent(accPop))
                                    .addGap(25, 25, 25)
                                    .addComponent(loginPop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel18)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(mailid, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel17)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(showMenu)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(deletemail, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(smtpServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectSmtp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(smtpPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(disconnectSmtp)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(popServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectPop))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(popPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(checkAuth))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(accPop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(passPop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(loginPop, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(showMenu))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(reMailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(forwarding)
                            .addComponent(reply))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mailid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18)
                        .addComponent(view)
                        .addComponent(deletemail))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(yourEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(opNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(retrieve)
                                .addComponent(delete))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(receiverAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(subjectValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendMsg)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(list)
                            .addComponent(disconnectPop))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectSmtpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectSmtpActionPerformed
        boolean flag = true; 
        connectionSmtpSet(true, false);
        smtp_server = win.smtpServerName.getText();
        
        try
        {
            SMTP_PORT = Integer.parseInt(win.smtpPort.getText());           
        }
        catch(NumberFormatException nfe)
        {
            
            flag = false;
        }
        
        if(!smtp_server.equals("") && flag)
        {
            try
            {
                sslsocketfactorySmtp = (SSLSocketFactory) SSLSocketFactory.getDefault();
                smtp = (SSLSocket) sslsocketfactorySmtp.createSocket();
                smtp.connect(new InetSocketAddress(smtp_server, SMTP_PORT), 2000);
                smtp.startHandshake();

                smtp_in = new BufferedReader(new InputStreamReader(smtp.getInputStream()));
                smtp_out = new PrintWriter(smtp.getOutputStream());
                
                resultCheck(220);
                String myname = InetAddress.getLocalHost().getHostName();
                sendCommandAndResultCheck("HELO " + myname, 250);
                
                connectionSmtpSet(false, false);
                win.forwarding.setEnabled(true);
                win.reply.setEnabled(true);
                win.reMailId.setEnabled(true);
            }catch(IOException ex)
            {
                //win.errMsg.setText("The server name or port is wrong !!");
                connectionSmtpSet(true, true);
            }
        }
        else
        {
            //win.errMsg.setText("The port must be number and server must not be empty !!");
            connectionSmtpSet(true, true);
        }
    }//GEN-LAST:event_connectSmtpActionPerformed

    private void disconnectSmtpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectSmtpActionPerformed
        try
        {
            sendCommandAndResultCheck("QUIT", 221);
            smtp.close();
        }catch(IOException ex){}
        connectionSmtpSet(true,true);
        loginOperateSmtpSet(false, true);
        sendOperateSmtpSet(false,true);
        win.forwarding.setEnabled(false);
        win.reply.setEnabled(false);
        win.reMailId.setEnabled(false);
        win.smtpMsg.setText("");
    }//GEN-LAST:event_disconnectSmtpActionPerformed

    private void accActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        try
        {
            sendCommandAndResultCheck("AUTH LOGIN", 334);
            Base64 b = new Base64();
            String id = win.acc.getText();
            String pass = win.pass.getText();
            id = b.encode(id.getBytes());
            pass = b.encode(pass.getBytes());
            smtp_out.write(id);
            smtp_out.write("\r\n");
            smtp_out.flush();

            String res = smtp_in.readLine();
            win.smtpMsg.append("recv> "+res + "\n");

            smtp_out.write(pass);
            smtp_out.write("\r\n");
            smtp_out.flush();

            res = smtp_in.readLine();
            win.smtpMsg.append("recv> "+res + "\n");
            if(Integer.parseInt(res.substring(0, 3)) == 535)
            {
                throw new RuntimeException(res);
            }
            loginOperateSmtpSet(false,false);
            sendOperateSmtpSet(true,false);
        }
        catch(IOException Ioex)
        {
            loginOperateSmtpSet(true,true);
            sendOperateSmtpSet(false,false);
        }
    }//GEN-LAST:event_loginActionPerformed

    private void yourEmailAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yourEmailAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yourEmailAddressActionPerformed

    private void connectPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectPopActionPerformed
        boolean flag = true; 
        connectionPopSet(true, false);
        pop_server = win.popServerName.getText();
        
        try
        {
            POP_PORT = Integer.parseInt(win.popPort.getText());
        }
        catch(NumberFormatException nfe)
        {
            
            flag = false;
        }
        
        if(!pop_server.equals("") && flag)
        {
            try
            {
                sslsocketfactoryPop = (SSLSocketFactory) SSLSocketFactory.getDefault();
                pop = (SSLSocket) sslsocketfactoryPop.createSocket();
                pop.connect(new InetSocketAddress(pop_server, POP_PORT), 2000);
                pop.startHandshake();
                
                pop_in = new BufferedReader(new InputStreamReader(pop.getInputStream()));
                pop_out = new PrintWriter(pop.getOutputStream());
                
                String res = pop_in.readLine();
                win.popMsg.append(res + "\n");
                
                if(!("+OK".equals(res.substring(0, 3))))
                {
                    throw new RuntimeException(res);
                }
                connectionPopSet(false, false);
                loginOperatePopSet(true,false);
                win.disconnectPop.setEnabled(true);
            }catch(IOException ex)
            {
                //win.errMsg.setText("The server name or port is wrong !!");
                connectionPopSet(true, true);
            }
        }
        else
        {
            //win.errMsg.setText("The port must be number and server must not be empty !!");
            connectionPopSet(true, true);
        }
    }//GEN-LAST:event_connectPopActionPerformed

    private void checkAuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAuthActionPerformed
        win.acc.setEnabled(true);
        win.pass.setEnabled(true);
        win.login.setEnabled(true);
        win.checkAuth.setEnabled(false);
        
    }//GEN-LAST:event_checkAuthActionPerformed

    private void smtpServerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smtpServerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smtpServerNameActionPerformed

    private void receiverAddrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiverAddrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receiverAddrActionPerformed

    private void sendMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsgActionPerformed
        String str = win.receiverAddr.getText();
        String subject = win.subjectValue.getText();
        String msgs = win.emailMsg.getText();
        String myEmail = win.yourEmailAddress.getText();
        
        if(!str.equals("") && !subject.equals("") && !msgs.equals("") && !myEmail.equals(""))
        {
            String delimiter = ",| ";
            StringTokenizer to = new StringTokenizer(str, delimiter);
            
            delimiter = "\\n";
            StringTokenizer msg = new StringTokenizer(msgs, delimiter);
    
            try
            {
                sendCommandAndResultCheck("MAIL FROM:<" + myEmail +">", 250);
                
                while(to.hasMoreTokens())
                { 
                    sendCommandAndResultCheck("rcpt TO:<" + to.nextToken() +">", 250);       
                }
                   
                sendCommandAndResultCheck("DATA", 354);
                smtp_out.print("Subject:"+ subject+"\r\n");
                smtp_out.print("\r\n");
                
                while(msg.hasMoreTokens())
                { 
                    smtp_out.print(msg.nextToken()+"\r\n");      
                }
                
                sendCommandAndResultCheck("\r\n.", 250);

            }
            catch(IOException Ioex)
            {}
        }
    }//GEN-LAST:event_sendMsgActionPerformed

    private void accPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accPopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accPopActionPerformed

    private void loginPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginPopActionPerformed
        String username = win.accPop.getText();
        String password = win.passPop.getText();
        
        if(!username.equals("") && !password.equals(""))
        {
            try
            {
                getSingleLine("USER " + username);
                getSingleLine("PASS " + password);
                getOperateSmtpSet(true,false);
                loginOperatePopSet(false, false);
                countNum();
            }
            catch(IOException Ioex)
            {}
        }     
    }//GEN-LAST:event_loginPopActionPerformed

    private void disconnectPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectPopActionPerformed
        try
        {
            getSingleLine("QUIT");
            pop.close();
        }catch(IOException ex){}
        loginOperatePopSet(false,true);
        connectionPopSet(true,true);
        getOperateSmtpSet(false,true);
    }//GEN-LAST:event_disconnectPopActionPerformed

    private void listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listActionPerformed
        try
        {
            getLines("LIST");
        }catch(IOException ex){}       
    }//GEN-LAST:event_listActionPerformed

    private void retrieveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.opNum.getText());
            retrOperation("RETR ", String.valueOf(num));
        }
        catch(Exception ex)
        {
            win.opNum.setText("");
        }      
    }//GEN-LAST:event_retrieveActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.opNum.getText());
            getSingleLine("DELE " + String.valueOf(num));
        }
        catch(Exception ex)
        {
            win.opNum.setText("");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void showMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMenuActionPerformed
        db.selectAll();
    }//GEN-LAST:event_showMenuActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.mailid.getText());
            db.selectOne(num, false, false);
        }
        catch(Exception ex)
        {
            win.databaseMsg.append("Id must be a number !!");
        }
    }//GEN-LAST:event_viewActionPerformed

    private void deletemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletemailActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.mailid.getText());
            db.delete(num);
        }
        catch(Exception ex)
        {
            win.databaseMsg.append("Id must be a number !!");
        }
    }//GEN-LAST:event_deletemailActionPerformed

    private void forwardingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardingActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.reMailId.getText());
            db.selectOne(num, true, false);
        }
        catch(Exception ex)
        {
            win.databaseMsg.append("Id must be a number !!");
        }
        
    }//GEN-LAST:event_forwardingActionPerformed

    private void replyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyActionPerformed
        int num;
        try
        {
            num = Integer.parseInt(win.reMailId.getText());
            db.selectOne(num, true, true);
        }
        catch(Exception ex)
        {
            win.databaseMsg.append("Id must be a number !!");
        }
    }//GEN-LAST:event_replyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientWin().setVisible(true);
            }
        });
    }
    
    public void connectionSmtpSet(boolean f, boolean cls)
    {
        win.smtpServerName.setEnabled(f);
        win.smtpPort.setEnabled(f);
        win.connectSmtp.setEnabled(f);
        win.disconnectSmtp.setEnabled(!f);
        win.checkAuth.setEnabled(!f);
        
        if(cls)
        {
            win.smtpServerName.setText("");
            win.smtpPort.setText("");
        }   
    }
    
    public void connectionPopSet(boolean f, boolean cls)
    {
        win.popServerName.setEnabled(f);
        win.popPort.setEnabled(f);
        win.connectPop.setEnabled(f);
        win.disconnectPop.setEnabled(!f);
      
        
        if(cls)
        {
            win.popServerName.setText("");
            win.popPort.setText("");
            win.popMsg.setText("");
        }   
    }
    
    public void loginOperateSmtpSet(boolean f, boolean cls)
    {
        win.acc.setEnabled(f);
        win.pass.setEnabled(f);
        win.login.setEnabled(f);
        win.checkAuth.setEnabled(f);
       
        if(cls)
        {
            win.acc.setText("");
            win.pass.setText("");
        }
    }
    
    public void sendOperateSmtpSet(boolean f, boolean cls)
    {
        win.yourEmailAddress.setEnabled(f);
        win.receiverAddr.setEnabled(f);
        win.subjectValue.setEnabled(f);
        win.emailMsg.setEnabled(f);
        win.sendMsg.setEnabled(f);
        
        if(cls)
        {
            win.yourEmailAddress.setText("");
            win.receiverAddr.setText("");
            win.subjectValue.setText("");
            win.emailMsg.setText("");
        }
    }
    
    public void sendCommandAndResultCheck(String command, int success_code) throws IOException
    {
        smtp_out.print(command + "\r\n");
        smtp_out.flush();
        win.smtpMsg.append("send> "+ command + "\n");
        resultCheck(success_code);
    }
    
    public void resultCheck(int success_code) throws IOException
    {
        String res = smtp_in.readLine();
        win.smtpMsg.append("recv> "+res + "\n");
        
        if(Integer.parseInt(res.substring(0, 3)) != success_code)
        {
            throw new RuntimeException(res);
        }
    }
    
    public void getSingleLine(String command) throws IOException
    {
        pop_out.print(command + "\r\n");
        pop_out.flush();
        
        String res = pop_in.readLine();
        win.popMsg.append(res + "\n"); 
        
        if(!("+OK".equals(res.substring(0, 3))))
        {
            throw new RuntimeException(res);
        }
    }
    
    public void getLines(String command) throws IOException
    {
        boolean cont = true;
        String buf = null; 
             
        pop_out.print(command + "\r\n");
        pop_out.flush();
        
        String res = pop_in.readLine();
        win.popMsg.append(res + "\n"); 
        
        if(!("+OK".equals(res.substring(0, 3))))
        {
            throw new RuntimeException(res);
        }
        
        while(cont)
        {
            buf = pop_in.readLine();
            win.popMsg.append(buf + "\n"); 
            
            if(".".equals(buf))
            {
                cont = false;
            }
        } 
    }
    
    public void retrOperation(String command, String num) throws IOException
    {
        int numTemp = Integer.parseInt(num);
        String data = "";
        boolean cont = true;
        String buf = null;
             
        pop_out.print(command + num + "\r\n");
        pop_out.flush();
        
        String res = pop_in.readLine();
        win.popMsg.append(res); 
        
        if(!("+OK".equals(res.substring(0, 3))))
        {
            throw new RuntimeException(res);
        }
        
        while(cont)
        {
            buf = pop_in.readLine();
            data = data + buf + "\n";
            win.popMsg.append(buf+"\n");
            if(".".equals(buf))
            {
                cont = false;
            }
        }

        int a = data.lastIndexOf("Return-Path:");
        data = data.substring(a);

        a = data.indexOf("<");
        int b = data.indexOf(">");

        String from = data.substring(a + 1, b);

        data = data.substring(b + 2);

        String date = "";
        a = data.indexOf("Date:");
        if(a >= 0)
        {
            date = data.substring(a + 6, data.indexOf("\n", a));
        }
        else
        {
            date = "Unknown";
        }

        a = data.indexOf("Subject:");
        String subject = data.substring(a + 8, data.indexOf("\n", a));

        a = data.indexOf("To:");
        String to = "";

        if(a >= 0)
        {
            to  = data.substring(a + 4,  data.indexOf("\n", a));
        }
        else
        {
            a = data.indexOf("Received: from");
            b = data.indexOf("for", a);
            to = data.substring(b + 5,  data.indexOf("\n", b) - 1);
        }

        a = data.indexOf("boundary");
        String trueData = "";
        if(a >= 0)
        {
            String boundary = data.substring(a + 10, data.indexOf("\"", a + 10));
            b = data.indexOf("Content-Type: text/plain");
            data = data.substring(b , data.indexOf(boundary, b));
            trueData = data.substring(data.indexOf("\n") + 2, data.lastIndexOf("\n") - 1);
        }
        else
        {
            a = data.indexOf("Subject");
            b = data.indexOf("\n", a);
            trueData = data.substring(b + 2);
        }
        
        win.popMsg.append("Mail From : " + from + "\n");
        win.popMsg.append("Mail To : " + to + "\n");
        win.popMsg.append("Mail Date : " + date + "\n");
        win.popMsg.append("Subject : " + subject + "\n");
        win.popMsg.append("Message :\n" );
        win.popMsg.append(trueData + "\n");
        
        if(recTable[numTemp - 1])
        {  
            db.insert(from, to, date, subject, trueData);
            recTable[numTemp - 1] = false;
        } 
        
    }
    
    public void loginOperatePopSet(boolean f, boolean cls)
    {
        win.accPop.setEnabled(f);
        win.passPop.setEnabled(f);
        win.loginPop.setEnabled(f);
        
        if(cls)
        {
            win.accPop.setText("");
            win.passPop.setText("");
        }
    }
    
    public void getOperateSmtpSet(boolean f, boolean cls)
    {
        win.opNum.setEnabled(f);
        win.delete.setEnabled(f);
        win.retrieve.setEnabled(f);
        win.list.setEnabled(f);

        if(cls)
        {
            win.opNum.setText("");
        }
    }
    
    public void countNum() throws IOException
    {  
        boolean cont = true;
        String buf = null; 
        pop_out.print("LIST" + "\r\n");
        pop_out.flush();

        while(cont)
        {
            buf = pop_in.readLine();
            count++;
            if(".".equals(buf))
            {
                count-=2;
                cont = false;
            }
        }

        recTable = new boolean[count];
        Arrays.fill(recTable, true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField acc;
    public javax.swing.JTextField accPop;
    public javax.swing.JButton checkAuth;
    public javax.swing.JButton connectPop;
    public javax.swing.JButton connectSmtp;
    public javax.swing.JTextArea databaseMsg;
    public javax.swing.JButton delete;
    public javax.swing.JButton deletemail;
    public javax.swing.JButton disconnectPop;
    public javax.swing.JButton disconnectSmtp;
    public javax.swing.JTextArea emailMsg;
    public javax.swing.JButton forwarding;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JButton list;
    public javax.swing.JButton login;
    public javax.swing.JButton loginPop;
    public javax.swing.JTextField mailid;
    public javax.swing.JTextField opNum;
    public javax.swing.JTextField pass;
    public javax.swing.JTextField passPop;
    public javax.swing.JTextArea popMsg;
    public javax.swing.JTextField popPort;
    public javax.swing.JTextField popServerName;
    public javax.swing.JTextField reMailId;
    public javax.swing.JTextField receiverAddr;
    public javax.swing.JButton reply;
    public javax.swing.JButton retrieve;
    public javax.swing.JButton sendMsg;
    public javax.swing.JButton showMenu;
    public javax.swing.JTextArea smtpMsg;
    public javax.swing.JTextField smtpPort;
    public javax.swing.JTextField smtpServerName;
    public javax.swing.JTextField subjectValue;
    public javax.swing.JButton view;
    public javax.swing.JTextField yourEmailAddress;
    // End of variables declaration//GEN-END:variables
}
